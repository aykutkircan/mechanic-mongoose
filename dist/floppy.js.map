{"version":3,"sources":["../src/floppy.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,MAAM,QAAQ,KAAR,CAAZ;;AAEA,IAAM,mBAAmB;AACrB,iBAAa,QAAQ,oBAAR,CADQ;AAErB,YAAQ,QAAQ,gBAAR,CAFa;AAGrB,eAAW,QAAQ,mBAAR,CAHU;AAIrB,kBAAc,QAAQ,sBAAR;AAJO,CAAzB;;AAOA,IAAM,yBAAyB,IAAI,KAAJ,GAAY,KAAZ,CAAkB,IAAI,MAAJ,GAAa,KAAb,CAAmB,OAAO,IAAP,CAAY,gBAAZ,CAAnB,CAAlB,CAA/B;;AAEA,IAAM,iBAAiB;AACnB,YAAQ,QAAQ,cAAR,CADW;AAEnB,aAAS,QAAQ,eAAR;AAFU,CAAvB;;IAKM,M;;;;;;;;AAOF,sBAA+C;AAAA,YAAnC,OAAmC,yDAAzB,EAAyB;AAAA,YAArB,cAAqB,yDAAJ,EAAI;;AAAA;;AAE3C,YAAI,CAAC,QAAQ,QAAT,IAAqB,CAAC,QAAQ,QAAR,CAAiB,YAAjB,CAA1B,EAA0D;AACtD,kBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,YAAI,CAAC,QAAQ,EAAb,EAAiB;AACb,kBAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACH;;AAED,YAAM,SAAS,IAAI,QAAJ,CAAa,cAAb,EAA6B,sBAA7B,CAAf;;AAEA,YAAI,OAAO,KAAX,EAAkB;AACd,kBAAM,OAAO,KAAb;AACH;;AAED,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,cAAL,GAAsB,OAAO,KAA7B;;AAEA,aAAK,cAAL;AACH;;;;;;;;;;;;;;;;yCAcgB;AAAA;AAAA;AAAA;;AAAA;;AAEb,qCAAqB,OAAO,iBAAP,EAArB,8HAAiD;AAAA,wBAAxC,QAAwC;;AAC7C,mCAAe,QAAf,EAAyB,KAAK,OAAL,CAAa,QAAtC;AACH;AAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKhB;;;mCAEU,M,EAA8B;AAAA,gBAAtB,eAAsB,yDAAJ,EAAI;;;AAErC,gBAAI,UAAU,KAAK,cAAnB;AACA,gBAAI,mBAAmB,gBAAgB,MAAhB,GAAyB,CAAhD,EAAmD;AAC/C,oBAAI,SAAS,IAAI,QAAJ,CAAa,eAAb,EAA8B,sBAA9B,CAAb;;AAEA,oBAAI,OAAO,KAAX,EAAkB;AACd,0BAAM,OAAO,KAAb;AACH;AACD,0BAAU,OAAO,KAAjB;AACH;;AAVoC;AAAA;AAAA;;AAAA;AAYrC,sCAAkB,OAAlB,mIAA2B;AAAA,wBAAnB,MAAmB;;;AAEvB,qCAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAK,OAAtC;AACH;AAfoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBxC;;;4CA/B0B;AACvB,mBAAO,OAAO,IAAP,CAAY,cAAZ,CAAP;AACH;;;;;;AAgCL,OAAO,OAAP,GAAiB,MAAjB","file":"floppy.js","sourcesContent":["const Joi = require(\"joi\");\n\nconst AvailablePlugins = {\n    \"timestamp\": require(\"mongoose-timestamp\"),\n    \"slug\": require(\"./plugins/slug\"),\n    \"shortid\": require(\"./plugins/shortid\"),\n    \"attachment\": require(\"./plugins/attachment\")\n};\n\nconst AvailablePluginsSchema = Joi.array().items(Joi.string().valid(Object.keys(AvailablePlugins)));\n\nconst AvailableTypes = {\n    \"File\": require(\"./types/file\"),\n    \"Image\": require(\"./types/image\")\n};\n\nclass Floppy {\n\n    /**\n     * Initialize Forklift\n     * @param {object} options\n     * @param {[string]} defaultPlugins\n     */\n    constructor(options = {}, defaultPlugins = []) {\n\n        if (!options.mongoose || !options.mongoose[\"connection\"]) {\n            throw new Error(\"Mongoose is not exist or is not valid.\");\n        }\n\n        if (!options.s3) {\n            throw new Error(\"S3 should be passed to Floppy constructor\");\n        }\n\n        const result = Joi.validate(defaultPlugins, AvailablePluginsSchema);\n\n        if (result.error) {\n            throw result.error;\n        }\n\n        this.options = options;\n        this.defaultPlugins = result.value;\n\n        this._registerTypes();\n    }\n\n    /**\n     * Get available types\n     * @returns {[string]}\n     */\n    static getAvailableTypes() {\n        return Object.keys(AvailableTypes);\n    }\n\n    /**\n     * Register gives types\n     * @private\n     */\n    _registerTypes() {\n\n        for (let typeName of Floppy.getAvailableTypes()) {\n            AvailableTypes[typeName](this.options.mongoose);\n        }\n    }\n\n    setPlugins(schema, overridePlugins = []) {\n\n        let plugins = this.defaultPlugins;\n        if (overridePlugins && overridePlugins.length > 0) {\n            let result = Joi.validate(overridePlugins, AvailablePluginsSchema);\n\n            if (result.error) {\n                throw result.error;\n            }\n            plugins = result.value;\n        }\n\n        for(let plugin of plugins) {\n            \n            AvailablePlugins[plugin](schema, this.options);\n        }\n    }\n}\n\nmodule.exports = Floppy;"]}