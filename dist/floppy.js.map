{"version":3,"sources":["../src/floppy.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,MAAM,QAAQ,KAAR,CAAN;;AAEN,IAAM,mBAAmB;AACrB,iBAAa,QAAQ,oBAAR,CAAb;AACA,YAAQ,QAAQ,gBAAR,CAAR;AACA,eAAW,QAAQ,mBAAR,CAAX;AACA,kBAAc,QAAQ,sBAAR,CAAd;CAJE;;AAON,IAAM,yBAAyB,IAAI,KAAJ,GAAY,KAAZ,CAAkB,IAAI,MAAJ,GAAa,KAAb,CAAmB,OAAO,IAAP,CAAY,gBAAZ,CAAnB,CAAlB,CAAzB;;AAEN,IAAM,iBAAiB;AACnB,YAAQ,QAAQ,cAAR,CAAR;AACA,aAAS,QAAQ,eAAR,CAAT;CAFE;;IAKA;;;;;;;;AAOF,aAPE,MAOF,GAA+C;YAAnC,gEAAU,kBAAyB;YAArB,uEAAiB,kBAAI;;8BAP7C,QAO6C;;AAE3C,YAAI,CAAC,QAAQ,QAAR,IAAoB,CAAC,QAAQ,QAAR,CAAiB,YAAjB,CAAD,EAAiC;AACtD,kBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN,CADsD;SAA1D;;AAIA,YAAI,CAAC,QAAQ,EAAR,EAAY;AACb,kBAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN,CADa;SAAjB;;AAIA,YAAM,SAAS,IAAI,QAAJ,CAAa,cAAb,EAA6B,sBAA7B,CAAT,CAVqC;;AAY3C,YAAI,OAAO,KAAP,EAAc;AACd,kBAAM,OAAO,KAAP,CADQ;SAAlB;;AAIA,aAAK,OAAL,GAAe,OAAf,CAhB2C;AAiB3C,aAAK,cAAL,GAAsB,OAAO,KAAP,CAjBqB;;AAmB3C,aAAK,cAAL,GAnB2C;KAA/C;;;;;;;;iBAPE;;;;;;;;yCAyCe;;;;;;;AAEb,qCAAqB,OAAO,iBAAP,4BAArB,oGAAiD;wBAAxC,uBAAwC;;AAC7C,mCAAe,QAAf,EAAyB,KAAK,OAAL,CAAa,QAAb,CAAzB,CAD6C;iBAAjD;;;;;;;;;;;;;;aAFa;;;;mCAON,QAA8B;gBAAtB,wEAAkB,kBAAI;;;AAErC,gBAAI,UAAU,KAAK,cAAL,CAFuB;AAGrC,gBAAI,mBAAmB,gBAAgB,MAAhB,GAAyB,CAAzB,EAA4B;AAC/C,oBAAI,SAAS,IAAI,QAAJ,CAAa,eAAb,EAA8B,sBAA9B,CAAT,CAD2C;;AAG/C,oBAAI,OAAO,KAAP,EAAc;AACd,0BAAM,OAAO,KAAP,CADQ;iBAAlB;AAGA,0BAAU,OAAO,KAAP,CANqC;aAAnD;;kDAHqC;;;;;AAYrC,sCAAkB,kCAAlB,wGAA2B;wBAAnB,sBAAmB;;;AAEvB,qCAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAK,OAAL,CAAjC,CAFuB;iBAA3B;;;;;;;;;;;;;;aAZqC;;;;4CAfd;AACvB,mBAAO,OAAO,IAAP,CAAY,cAAZ,CAAP,CADuB;;;;WAjCzB;;;AAmEN,OAAO,OAAP,GAAiB,MAAjB","file":"floppy.js","sourcesContent":["const Joi = require(\"joi\");\n\nconst AvailablePlugins = {\n    \"timestamp\": require(\"mongoose-timestamp\"),\n    \"slug\": require(\"./plugins/slug\"),\n    \"shortid\": require(\"./plugins/shortid\"),\n    \"attachment\": require(\"./plugins/attachment\")\n};\n\nconst AvailablePluginsSchema = Joi.array().items(Joi.string().valid(Object.keys(AvailablePlugins)));\n\nconst AvailableTypes = {\n    \"File\": require(\"./types/file\"),\n    \"Image\": require(\"./types/image\")\n};\n\nclass Floppy {\n\n    /**\n     * Initialize Forklift\n     * @param {object} options\n     * @param {[string]} defaultPlugins\n     */\n    constructor(options = {}, defaultPlugins = []) {\n\n        if (!options.mongoose || !options.mongoose[\"connection\"]) {\n            throw new Error(\"Mongoose is not exist or is not valid.\");\n        }\n\n        if (!options.s3) {\n            throw new Error(\"S3 should be passed to Floppy constructor\");\n        }\n\n        const result = Joi.validate(defaultPlugins, AvailablePluginsSchema);\n\n        if (result.error) {\n            throw result.error;\n        }\n\n        this.options = options;\n        this.defaultPlugins = result.value;\n\n        this._registerTypes();\n    }\n\n    /**\n     * Get available types\n     * @returns {[string]}\n     */\n    static getAvailableTypes() {\n        return Object.keys(AvailableTypes);\n    }\n\n    /**\n     * Register gives types\n     * @private\n     */\n    _registerTypes() {\n\n        for (let typeName of Floppy.getAvailableTypes()) {\n            AvailableTypes[typeName](this.options.mongoose);\n        }\n    }\n\n    setPlugins(schema, overridePlugins = []) {\n\n        let plugins = this.defaultPlugins;\n        if (overridePlugins && overridePlugins.length > 0) {\n            let result = Joi.validate(overridePlugins, AvailablePluginsSchema);\n\n            if (result.error) {\n                throw result.error;\n            }\n            plugins = result.value;\n        }\n\n        for(let plugin of plugins) {\n            \n            AvailablePlugins[plugin](schema, this.options);\n        }\n    }\n}\n\nmodule.exports = Floppy;"]}