{"version":3,"sources":["../src/floppy.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;AAE3B,IAAM,gBAAgB,GAAG;AACrB,eAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC;AAC1C,UAAM,EAAE,OAAO,CAAC,gBAAgB,CAAC;AACjC,aAAS,EAAE,OAAO,CAAC,mBAAmB,CAAC;AACvC,gBAAY,EAAE,OAAO,CAAC,sBAAsB,CAAC;CAChD,CAAC;;AAEF,IAAM,sBAAsB,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;;AAEpG,IAAM,cAAc,GAAG;AACnB,UAAM,EAAE,OAAO,CAAC,cAAc,CAAC;AAC/B,WAAO,EAAE,OAAO,CAAC,eAAe,CAAC;CACpC,CAAC;;IAEI,MAAM;;;;;;;;AAOR,aAPE,MAAM,GAOuC;YAAnC,OAAO,yDAAG,EAAE;YAAE,cAAc,yDAAG,EAAE;;8BAP3C,MAAM;;AASJ,YAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;AACtD,kBAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC7D;;AAED,YAAI,CAAC,OAAO,CAAC,EAAE,EAAE;AACb,kBAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAChE;;AAED,YAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,sBAAsB,CAAC,CAAC;;AAEpE,YAAI,MAAM,CAAC,KAAK,EAAE;AACd,kBAAM,MAAM,CAAC,KAAK,CAAC;SACtB;;AAED,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC;;AAEnC,YAAI,CAAC,cAAc,EAAE,CAAC;KACzB;;;;;;AAAA;iBA3BC,MAAM;;;;;;;yCAyCS;;;;;;;AAEb,qCAAqB,MAAM,CAAC,iBAAiB,EAAE,8HAAE;wBAAxC,QAAQ;;AACb,kCAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACnD;;;;;;;;;;;;;;;SACJ;;;mCAEU,MAAM,EAAwB;gBAAtB,eAAe,yDAAG,EAAE;;AAEnC,gBAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;AAClC,gBAAI,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;AAC/C,oBAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;;AAEnE,oBAAI,MAAM,CAAC,KAAK,EAAE;AACd,0BAAM,MAAM,CAAC,KAAK,CAAC;iBACtB;AACD,uBAAO,GAAG,MAAM,CAAC,KAAK,CAAC;aAC1B;;;;;;;AAED,sCAAkB,OAAO,mIAAE;wBAAnB,MAAM;;AAEV,oCAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClD;;;;;;;;;;;;;;;SACJ;;;4CA/B0B;AACvB,mBAAO,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACtC;;;WAnCC,MAAM;;;AAmEZ,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"floppy.js","sourcesContent":["const Joi = require(\"joi\");\n\nconst AvailablePlugins = {\n    \"timestamp\": require(\"mongoose-timestamp\"),\n    \"slug\": require(\"./plugins/slug\"),\n    \"shortid\": require(\"./plugins/shortid\"),\n    \"attachment\": require(\"./plugins/attachment\")\n};\n\nconst AvailablePluginsSchema = Joi.array().items(Joi.string().valid(Object.keys(AvailablePlugins)));\n\nconst AvailableTypes = {\n    \"File\": require(\"./types/file\"),\n    \"Image\": require(\"./types/image\")\n};\n\nclass Floppy {\n\n    /**\n     * Initialize Forklift\n     * @param {object} options\n     * @param {[string]} defaultPlugins\n     */\n    constructor(options = {}, defaultPlugins = []) {\n\n        if (!options.mongoose || !options.mongoose[\"connection\"]) {\n            throw new Error(\"Mongoose is not exist or is not valid.\");\n        }\n\n        if (!options.s3) {\n            throw new Error(\"S3 should be passed to Floppy constructor\");\n        }\n\n        const result = Joi.validate(defaultPlugins, AvailablePluginsSchema);\n\n        if (result.error) {\n            throw result.error;\n        }\n\n        this.options = options;\n        this.defaultPlugins = result.value;\n\n        this._registerTypes();\n    }\n\n    /**\n     * Get available types\n     * @returns {[string]}\n     */\n    static getAvailableTypes() {\n        return Object.keys(AvailableTypes);\n    }\n\n    /**\n     * Register gives types\n     * @private\n     */\n    _registerTypes() {\n\n        for (let typeName of Floppy.getAvailableTypes()) {\n            AvailableTypes[typeName](this.options.mongoose);\n        }\n    }\n\n    setPlugins(schema, overridePlugins = []) {\n\n        let plugins = this.defaultPlugins;\n        if (overridePlugins && overridePlugins.length > 0) {\n            let result = Joi.validate(overridePlugins, AvailablePluginsSchema);\n\n            if (result.error) {\n                throw result.error;\n            }\n            plugins = result.value;\n        }\n\n        for(let plugin of plugins) {\n\n            AvailablePlugins[plugin](schema, this.options);\n        }\n    }\n}\n\nmodule.exports = Floppy;"]}