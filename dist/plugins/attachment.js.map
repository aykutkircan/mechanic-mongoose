{"version":3,"sources":["../../src/plugins/attachment.js"],"names":[],"mappings":"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","file":"attachment.js","sourcesContent":["/**\n *\n * Updated by uur on 12/01/16.\n */\n\n\"use strict\";\n\nconst Async = require(\"async\");\nconst Forklift = require(\"s3-forklift\");\nconst FileUploader = require(\"./uploader/file_uploader\");\nconst ImageUploader = require(\"./uploader/image_uploader\");\n\n/**\n * @param schema\n * @param options\n */\n\nmodule.exports = (schema, options) => {\n\n    const mongoose = options.mongoose;\n    const s3 = options.s3;\n\n    if (!s3 || !mongoose) {\n        console.log(\"Options passed to mechanic-mongoose does not contain s3 credentials.\");\n    }\n\n    const schemaItems = Object.keys(schema.tree);\n\n    const attachments = {\n        images: [],\n        files: []\n    };\n\n    for (let schemaItem of schemaItems) {\n\n        /**\n         *\n         * test_image: {\n         *    type: mongoose.Schema.Types.Image,\n         *    versions: {\n         *       main: {\n         *           size: \"1920x1080\",\n         *           resize: \"^\",\n         *           output: \"jpeg\"\n         *       },\n         *       display2: \"960x\",\n         *       display3: \"x960\"\n         *     }\n         * }\n         *\n         *    available resize options: ^,!,>\n         *    available outputs: \"jpeg\", \"jpg\", \"png\"\n         *\n         *\n         *\n         * test_file {\n         *    type: mongoose.Schema.Types.File,\n         *    extension: [\"pdf\"]\n         * }\n         *\n         *\n         */\n\n        if (schema.tree[schemaItem].type == mongoose.Schema.Types[\"Image\"]) {\n\n            const versions = schema.tree[schemaItem][\"versions\"] || {};\n\n            if (typeof versions === \"string\" || versions instanceof String) {\n                \n                attachments.images.push({\n                    schemaKey: schemaItem,\n                    versions: [\n                        {[\"main\"]: _transformImageDesc(versions, schemaItem)}\n                    ]\n                });\n                continue;\n            }\n\n            const versionKeys = Object.keys(versions);\n            if (versionKeys.indexOf(\"original\") != -1) {\n                throw new Error(`${schemaItem} contains 'original' key which do not valid.`);\n            }\n\n            const images = [];\n            for (let versionKey of versionKeys) {\n\n                if (versionKey == \"type\") {\n                    continue;\n                }\n\n                images.push({[versionKey]: _transformImageDesc(versions[versionKey], schemaItem)});\n            }\n\n            attachments.images.push({\n                schemaKey: schemaItem,\n                versions: images\n            });\n\n        }\n        else if (schema.tree[schemaItem].type == mongoose.Schema.Types[\"File\"]) {\n\n            attachments.files.push({\n                schemaKey: schemaItem,\n                extensions: _transformFileTypes(schema.tree[schemaItem][\"extension\"])\n            });\n        }\n    }\n    \n    const forklift = new Forklift(s3);\n\n    schema.pre(\"save\", function (next) {\n\n        const instance = this;\n\n        const images = [];\n        const files = [];\n\n        for (let imageField of attachments.images) {\n\n            const schemaKey = imageField[\"schemaKey\"];\n\n            if (!instance[schemaKey] || !instance.isModified(schemaKey)) {\n                continue;\n            }\n\n            if (!instance[schemaKey].path || !instance[schemaKey].filename) {\n                console.log(`${schemaKey} is not valid in instance: ${instance[schemaKey]}`);\n                continue;\n            }\n\n            images.push({\n                versions: imageField[\"versions\"],\n                schemaKey: schemaKey\n            });\n        }\n\n        for (let fileField of attachments.files) {\n\n            const schemaKey = fileField[\"schemaKey\"];\n\n            if (!instance[schemaKey] || !instance.isModified(schemaKey)) {\n                continue;\n            }\n\n            if (!instance[schemaKey].path || !instance[schemaKey].filename) {\n                return next(new Error(`${schemaKey} is not valid in instance: ${instance[schemaKey]}`));\n            }\n\n            const ext = _getExtension(instance[schemaKey].filename);\n\n            if (fileField[\"extensions\"].indexOf(ext) == -1) {\n                return next(new Error(`${schemaKey} has not valid extension: ${ext}`));\n            }\n\n            files.push({\n                schemaKey: schemaKey\n            });\n        }\n\n\n        Async.auto({\n\n            \"uploadFiles\": (autoCallback) => {\n\n                if (!attachments.files) {\n                    return autoCallback();\n                }\n                return FileUploader(forklift, instance, files, autoCallback);\n            },\n            \"uploadImages\": (autoCallback) => {\n\n                if (!attachments.images) {\n                    return autoCallback();\n                }\n                return ImageUploader(forklift, instance, images, autoCallback);\n            }\n        }, next);\n\n    });\n};\n\nfunction _transformFileTypes(extensions) {\n\n    if (typeof extensions === \"string\" || extensions instanceof String) {\n        return [extensions];\n    }\n    return extensions;\n}\n\nfunction _transformImageDesc(versionImage, schemaItem) {\n\n    const Image = {\n        output: \"jpeg\",\n        resize: \"^\"\n    };\n\n    if (typeof versionImage === \"string\" || versionImage instanceof String) {\n        Image[\"size\"] = _transformSize(versionImage, schemaItem);\n    }\n    else { // object\n        Image[\"size\"] = _transformSize(versionImage[\"size\"]);\n        Image[\"output\"] = _transformOutput(versionImage[\"output\"], schemaItem);\n        Image[\"resize\"] = _transformResize(versionImage[\"resize\"], schemaItem);\n    }\n\n    return Image;\n}\n\nfunction _transformOutput(output, schemaItem) {\n\n    if (!output) {\n        return \"jpeg\";\n    }\n\n    if ([\"jpeg\", \"jpg\", \"png\"].indexOf(output) == -1) {\n        throw new Error(`schemaItem: ${schemaItem}, output:\"${output}\" is not valid`);\n    }\n\n    return output;\n}\n\nfunction _transformResize(resize, schemaItem) {\n\n    if (!resize) {\n        return \"^\";\n    }\n\n    if ([\"^\", \">\", \"!\"].indexOf(resize) == -1) {\n        throw new Error(`schemaItem: ${schemaItem}, resize:\"${resize}\" is not valid`);\n    }\n\n    return resize;\n}\n\nfunction _transformSize(size, schemaItem) {\n\n    if (!size) {\n        throw new Error(`schemaItem: ${schemaItem}, size is not exist in image.`);\n    }\n\n    const sizeArray = size.split(\"x\");\n    if (sizeArray.length != 2) {\n        throw new Error(`schemaItem: ${schemaItem}, size:\"${size}\" is not valid`);\n    }\n\n    let width;\n    let height;\n\n    try {\n        width = sizeArray[0] ? parseInt(sizeArray[0]) : null;\n        height = sizeArray[1] ? parseInt(sizeArray[1]) : null;\n    }\n    catch (e) {\n        throw new Error(`schemaItem: ${schemaItem}, ${size} is not valid`);\n    }\n\n    return {\n        width,\n        height\n    }\n\n}\n\nfunction _getExtension(fileName) {\n\n    try {\n        return fileName && fileName.split(\".\")[1]\n    }\n    catch(e) {\n        return \"\";\n    }\n}"]}