{"version":3,"sources":["../../../src/plugins/validation/check_attachments.js"],"names":[],"mappings":";;;AAGA;;AAEA,IAAM,WAAW,QAAQ,UAAR,CAAX;;AAEN,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAmB,QAAnB,EAA6B,MAA7B,EAAqC,MAArC,EAA6C;;AAE1D,QAAI,WAAW,KAAX,CAFsD;AAG1D,QAAI,QAAJ,EAAc;;AACV,mBAAW,IAAX,CADU;KAAd;;AAIA,QAAM,aAAa,OAAO,IAAP,CAAY,OAAO,IAAP,CAAzB,CAPoD;;;;;;;AAS1D,6BAAgB,oCAAhB,oGAA4B;gBAAnB,kBAAmB;;;AAExB,gBAAM,aAAa,OAAO,IAAP,CAAY,GAAZ,CAAb,CAFkB;;AAIxB,gBAAI,WAAW,IAAX,IAAmB,SAAS,WAAT,CAAqB,KAArB,IAChB,WAAW,IAAX,IAAmB,SAAS,WAAT,CAAqB,IAArB,EAA2B;;AAEjD,oBAAM,aAAa,WAAW,QAAX,CAF8B;;AAIjD,oBAAI,CAAC,QAAQ,GAAR,CAAD,EAAe;;AAEf,6BAFe;iBAAnB;AAIA,oBAAI,CAAC,QAAQ,GAAR,EAAa,QAAb,IAAyB,CAAC,QAAQ,GAAR,EAAa,IAAb,EAAmB;;AAE9C,wBAAI,cAAc,CAAC,QAAD,EAAW;AACzB,+BAAO,IAAP,CAAY;AACR,iCAAK,GAAL;AACA,iCAAK,mBAAL;yBAFJ,EADyB;qBAA7B,MAMK,IAAI,cAAc,QAAd,IAA0B,CAAC,SAAS,GAAT,CAAD,EAAgB;AAC/C,+BAAO,IAAP,CAAY;AACR,iCAAK,GAAL;AACA,iCAAK,mBAAL;yBAFJ,EAD+C;qBAA9C;AAML,2BAAO,QAAQ,GAAR,CAAP,CAd8C;iBAAlD,MAgBK;AACD,wBAAI,WAAW,IAAX,IAAmB,SAAS,WAAT,CAAqB,KAArB,EAA4B;;AAE/C,4BAAM,eAAe,QAAQ,GAAR,EAAa,SAAb,EAAwB,cAAxB,EAAwC,KAAxC,CAA8C,GAA9C,CAAf,CAFyC;AAG/C,4BAAI,aAAa,CAAb,KAAmB,OAAnB,EAA4B;AAC5B,mCAAO,QAAQ,GAAR,CAAP,CAD4B;AAE5B,mCAAO,IAAP,CAAY;AACR,qCAAK,GAAL;AACA,qCAAK,6BAAL;6BAFJ,EAF4B;yBAAhC,MAOK,IAAI,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,OAAvB,CAA+B,aAAa,CAAb,EAAgB,iBAAhB,EAA/B,KAAuE,CAAC,CAAD,EAAI;AAChF,mCAAO,QAAQ,GAAR,CAAP,CADgF;AAEhF,mCAAO,IAAP,CAAY;AACR,qCAAK,GAAL;AACA,qCAAK,wDAAL;6BAFJ,EAFgF;yBAA/E;qBAVT;AAkBA,wBAAI,WAAW,IAAX,IAAmB,SAAS,WAAT,CAAqB,IAArB,EAA2B;;AAE9C,4BAAM,gBAAgB,QAAQ,GAAR,EAAa,QAAb,CAAsB,KAAtB,CAA4B,GAA5B,CAAhB,CAFwC;AAG9C,4BAAM,MAAM,cAAc,GAAd,EAAN,CAHwC;;AAK9C,4BAAI,WAAW,WAAW,SAAX,CAL+B;AAM9C,4BAAI,EAAE,WAAW,SAAX,YAAgC,KAAhC,CAAF,EAA0C;AAC1C,uCAAW,CAAC,QAAD,CAAX,CAD0C;yBAA9C;;AAIA,4BAAI,SAAS,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAAD,EAAI;AAC7B,mCAAO,QAAQ,GAAR,CAAP,CAD6B;AAE7B,mCAAO,IAAP,CAAY;AACR,qCAAK,GAAL;AACA,qCAAK,6CAA6C,WAAW,IAAX;6BAFtD,EAF6B;yBAAjC;qBAVJ;iBAnCJ;aATJ;SAJJ;;;;;;;;;;;;;;KAT0D;CAA7C","file":"check_attachments.js","sourcesContent":["/**\n * Check attachments uploaded with multipart-form.\n */\n\"use strict\";\n\nconst Mongoose = require(\"mongoose\");\n\nmodule.exports = function (payload, instance, schema, errors) {\n\n    let isUpdate = false;\n    if (instance) { // update operation\n        isUpdate = true;\n    }\n\n    const schemaKeys = Object.keys(schema.tree);\n\n    for (let key of schemaKeys) {\n\n        const schemaItem = schema.tree[key];\n\n        if (schemaItem.type == Mongoose.SchemaTypes.Image\n            || schemaItem.type == Mongoose.SchemaTypes.File) {\n\n            const isRequired = schemaItem.required;\n\n            if (!payload[key]) {\n                // skip fot not included record keys\n                continue;\n            }\n            if (!payload[key].filename || !payload[key].path) {\n\n                if (isRequired && !isUpdate) {\n                    errors.push({\n                        key: key,\n                        msg: \"can not be blank.\"\n                    });\n                }\n                else if (isRequired && isUpdate && !instance[key]) {\n                    errors.push({\n                        key: key,\n                        msg: \"can not be blank.\"\n                    });\n                }\n                delete payload[key];\n            }\n            else {\n                if (schemaItem.type == Mongoose.SchemaTypes.Image) {\n\n                    const contentTypes = payload[key][\"headers\"][\"content-type\"].split(\"/\");\n                    if (contentTypes[0] != \"image\") {\n                        delete payload[key];\n                        errors.push({\n                            key: key,\n                            msg: \"uploaded file not an image.\"\n                        });\n                    }\n                    else if ([\"jpg\", \"jpeg\", \"png\"].indexOf(contentTypes[1].toLocaleLowerCase()) == -1) {\n                        delete payload[key];\n                        errors.push({\n                            key: key,\n                            msg: \"uploaded file not a valid image, expected: jpg or png.\"\n                        });\n                    }\n                }\n                if (schemaItem.type == Mongoose.SchemaTypes.File) {\n\n                    const filenameParts = payload[key].filename.split(\".\");\n                    const ext = filenameParts.pop();\n\n                    let expected = schemaItem.extension;\n                    if (!(schemaItem.extension instanceof Array)) {\n                        expected = [expected];\n                    }\n\n                    if (expected.indexOf(ext) == -1) {\n                        delete payload[key];\n                        errors.push({\n                            key: key,\n                            msg: \"uploaded file has wrong type, expected: \" + schemaItem.kind\n                        });\n                    }\n                }\n            }\n        }\n    }\n};"]}