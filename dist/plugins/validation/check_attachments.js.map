{"version":3,"sources":["../../../src/plugins/validation/check_attachments.js"],"names":[],"mappings":";;;;AAIA;;AAEA,OAAO,OAAP,GAAiB,UAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,MAAvC,EAA+C,MAA/C,EAAuD;;AAEpE,QAAM,WAAW,CAAC,CAAC,QAAnB;;AAEA,QAAM,aAAa,OAAO,IAAP,CAAY,OAAO,IAAnB,CAAnB;;AAJoE;AAAA;AAAA;;AAAA;AAMpE,6BAAgB,UAAhB,8HAA4B;AAAA,gBAAnB,GAAmB;;;AAExB,gBAAM,aAAa,OAAO,IAAP,CAAY,GAAZ,CAAnB;;AAEA,gBAAI,CAAC,WAAW,IAAhB,EAAsB;AAClB;AACH;;AAED,gBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,KAAzC,IACG,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,IADhD,EACsD;AAClD;AACH;;AAED,gBAAM,aAAa,WAAW,QAA9B;AACA,gBAAM,cAAc,QAAQ,GAAR,KAAgB,QAAQ,GAAR,EAAa,QAAjD;;AAEA,gBAAI,CAAC,WAAL,EAAkB;;;AAEd,uBAAO,QAAQ,GAAR,CAAP;;AAEA,oBAAK,cAAc,CAAC,QAAhB,IAA8B,cAAc,QAAd,IAA0B,CAAC,SAAS,GAAT,CAA7D,EAA6E;AACzE,2BAAO,IAAP,CAAY;AACR,6BAAK,GADG;AAER,6BAAK;AAFG,qBAAZ;AAIH;AACJ,aAVD,MAWK;;;AAED,oBAAI;AACA,wBAAM,MAAM,QAAQ,GAAR,EAAa,QAAb,CAAsB,KAAtB,CAA4B,GAA5B,EAAiC,GAAjC,EAAZ;;AAEA,wBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,KAAzC,IAAkD,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,OAAvB,CAA+B,IAAI,iBAAJ,EAA/B,KAA2D,CAAC,CAAlH,EAAqH;;AAEjH,+BAAO,QAAQ,GAAR,CAAP;AACA,+BAAO,IAAP,CAAY;AACR,iCAAK,GADG;AAER,iCAAK;AAFG,yBAAZ;AAIH;AACD,wBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,IAA7C,EAAmD;;AAE/C,4BAAI,WAAW,WAAW,SAA1B;;AAEA,4BAAI,CAAC,QAAL,EAAe;AACX;AACH;;AAED,4BAAI,EAAE,WAAW,SAAX,YAAgC,KAAlC,CAAJ,EAA8C;AAC1C,uCAAW,CAAC,QAAD,CAAX;AACH;AACD,4BAAI,SAAS,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;;AAE7B,mCAAO,QAAQ,GAAR,CAAP;;AAEA,mCAAO,IAAP,CAAY;AACR,qCAAK,GADG;AAER,qCAAK,6CAA6C,SAAS,IAAT,CAAc,GAAd;AAF1C,6BAAZ;AAIH;AACJ;AACJ,iBAhCD,CAiCA,OAAO,CAAP,EAAU;;AAEN,2BAAO,QAAQ,GAAR,CAAP;AACA,2BAAO,IAAP,CAAY;AACR,6BAAK,GADG;AAER,6BAAK;AAFG,qBAAZ;AAIH;AACJ;AACJ;AA7EmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8EvE,CA9ED","file":"check_attachments.js","sourcesContent":["/**\n * Check attachments uploaded with multipart-form.\n */\n\n\"use strict\";\n\nmodule.exports = function (mongoose, payload, instance, schema, errors) {\n\n    const isUpdate = !!instance;\n\n    const schemaKeys = Object.keys(schema.tree);\n\n    for (let key of schemaKeys) {\n\n        const schemaItem = schema.tree[key];\n\n        if (!schemaItem.type) {\n            continue;\n        }\n\n        if (schemaItem.type != mongoose.Schema.Types.Image\n            && schemaItem.type != mongoose.Schema.Types.File) {\n            continue;\n        }\n\n        const isRequired = schemaItem.required;\n        const itemPayload = payload[key] && payload[key].filename;\n\n        if (!itemPayload) { // filename/payload empty!\n\n            delete payload[key];\n\n            if ((isRequired && !isUpdate) || (isRequired && isUpdate && !instance[key])) {\n                errors.push({\n                    key: key,\n                    msg: \"can not be blank.\"\n                });\n            }\n        }\n        else { // filename/payload exist\n\n            try {\n                const ext = payload[key].filename.split(\".\").pop();\n\n                if (schemaItem.type == mongoose.Schema.Types.Image && [\"jpg\", \"jpeg\", \"png\"].indexOf(ext.toLocaleLowerCase()) == -1) {\n\n                    delete payload[key];\n                    errors.push({\n                        key: key,\n                        msg: \"uploaded file not a valid image, expected: jpg or png.\"\n                    });\n                }\n                if (schemaItem.type == mongoose.Schema.Types.File) {\n\n                    let expected = schemaItem.extension;\n\n                    if (!expected) {\n                        continue;\n                    }\n\n                    if (!(schemaItem.extension instanceof Array)) {\n                        expected = [expected];\n                    }\n                    if (expected.indexOf(ext) == -1) {\n\n                        delete payload[key];\n\n                        errors.push({\n                            key: key,\n                            msg: \"uploaded file has wrong type, expected: \" + expected.join(\",\")\n                        });\n                    }\n                }\n            }\n            catch (e) {\n\n                delete payload[key];\n                errors.push({\n                    key: key,\n                    msg: \"not a valid file\"\n                });\n            }\n        }\n    }\n};"]}