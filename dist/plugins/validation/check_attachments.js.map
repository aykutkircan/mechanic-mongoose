{"version":3,"sources":["../../../src/plugins/validation/check_attachments.js"],"names":[],"mappings":";;;;AAIA;;AAEA,OAAO,OAAP,GAAiB,UAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,MAAvC,EAA+C,MAA/C,EAAuD;;AAEpE,QAAM,WAAW,CAAC,CAAC,QAAD,CAFkD;;AAIpE,QAAM,aAAa,OAAO,IAAP,CAAY,OAAO,IAAP,CAAzB,CAJ8D;;;;;;;AAMpE,6BAAgB,oCAAhB,oGAA4B;gBAAnB,kBAAmB;;;AAExB,gBAAM,aAAa,OAAO,IAAP,CAAY,GAAZ,CAAb,CAFkB;;AAIxB,gBAAI,CAAC,WAAW,IAAX,EAAiB;AAClB,yBADkB;aAAtB;;AAIA,gBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,KAAtB,IAChB,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,IAAtB,EAA4B;AAClD,yBADkD;aADtD;;AAKA,gBAAM,aAAa,WAAW,QAAX,CAbK;AAcxB,gBAAM,cAAc,QAAQ,GAAR,KAAgB,QAAQ,GAAR,EAAa,QAAb,CAdZ;;AAgBxB,gBAAI,CAAC,WAAD,EAAc;;;AAEd,uBAAO,QAAQ,GAAR,CAAP,CAFc;;AAId,oBAAI,UAAC,IAAc,CAAC,QAAD,IAAe,cAAc,QAAd,IAA0B,CAAC,SAAS,GAAT,CAAD,EAAiB;AACzE,2BAAO,IAAP,CAAY;AACR,6BAAK,GAAL;AACA,6BAAK,mBAAL;qBAFJ,EADyE;iBAA7E;aAJJ,MAWK;;;AAED,oBAAI;AACA,wBAAM,MAAM,QAAQ,GAAR,EAAa,QAAb,CAAsB,KAAtB,CAA4B,GAA5B,EAAiC,GAAjC,EAAN,CADN;;AAGA,wBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,KAAtB,IAA+B,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,OAAvB,CAA+B,IAAI,iBAAJ,EAA/B,KAA2D,CAAC,CAAD,EAAI;;AAEjH,+BAAO,QAAQ,GAAR,CAAP,CAFiH;AAGjH,+BAAO,IAAP,CAAY;AACR,iCAAK,GAAL;AACA,iCAAK,wDAAL;yBAFJ,EAHiH;qBAArH;AAQA,wBAAI,WAAW,IAAX,IAAmB,SAAS,MAAT,CAAgB,KAAhB,CAAsB,IAAtB,EAA4B;;AAE/C,4BAAI,WAAW,WAAW,SAAX,CAFgC;;AAI/C,4BAAI,CAAC,QAAD,EAAW;AACX,qCADW;yBAAf;;AAIA,4BAAI,EAAE,WAAW,SAAX,YAAgC,KAAhC,CAAF,EAA0C;AAC1C,uCAAW,CAAC,QAAD,CAAX,CAD0C;yBAA9C;AAGA,4BAAI,SAAS,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAAD,EAAI;;AAE7B,mCAAO,QAAQ,GAAR,CAAP,CAF6B;;AAI7B,mCAAO,IAAP,CAAY;AACR,qCAAK,GAAL;AACA,qCAAK,6CAA6C,SAAS,IAAT,CAAc,GAAd,CAA7C;6BAFT,EAJ6B;yBAAjC;qBAXJ;iBAXJ,CAiCA,OAAO,CAAP,EAAU;;AAEN,2BAAO,QAAQ,GAAR,CAAP,CAFM;AAGN,2BAAO,IAAP,CAAY;AACR,6BAAK,GAAL;AACA,6BAAK,kBAAL;qBAFJ,EAHM;iBAAV;aA9CJ;SAhBJ;;;;;;;;;;;;;;KANoE;CAAvD","file":"check_attachments.js","sourcesContent":["/**\n * Check attachments uploaded with multipart-form.\n */\n\n\"use strict\";\n\nmodule.exports = function (mongoose, payload, instance, schema, errors) {\n\n    const isUpdate = !!instance;\n\n    const schemaKeys = Object.keys(schema.tree);\n\n    for (let key of schemaKeys) {\n\n        const schemaItem = schema.tree[key];\n\n        if (!schemaItem.type) {\n            continue;\n        }\n\n        if (schemaItem.type != mongoose.Schema.Types.Image\n            && schemaItem.type != mongoose.Schema.Types.File) {\n            continue;\n        }\n\n        const isRequired = schemaItem.required;\n        const itemPayload = payload[key] && payload[key].filename;\n\n        if (!itemPayload) { // filename/payload empty!\n\n            delete payload[key];\n\n            if ((isRequired && !isUpdate) || (isRequired && isUpdate && !instance[key])) {\n                errors.push({\n                    key: key,\n                    msg: \"can not be blank.\"\n                });\n            }\n        }\n        else { // filename/payload exist\n\n            try {\n                const ext = payload[key].filename.split(\".\").pop();\n\n                if (schemaItem.type == mongoose.Schema.Types.Image && [\"jpg\", \"jpeg\", \"png\"].indexOf(ext.toLocaleLowerCase()) == -1) {\n\n                    delete payload[key];\n                    errors.push({\n                        key: key,\n                        msg: \"uploaded file not a valid image, expected: jpg or png.\"\n                    });\n                }\n                if (schemaItem.type == mongoose.Schema.Types.File) {\n\n                    let expected = schemaItem.extension;\n\n                    if (!expected) {\n                        continue;\n                    }\n\n                    if (!(schemaItem.extension instanceof Array)) {\n                        expected = [expected];\n                    }\n                    if (expected.indexOf(ext) == -1) {\n\n                        delete payload[key];\n\n                        errors.push({\n                            key: key,\n                            msg: \"uploaded file has wrong type, expected: \" + expected.join(\",\")\n                        });\n                    }\n                }\n            }\n            catch (e) {\n\n                delete payload[key];\n                errors.push({\n                    key: key,\n                    msg: \"not a valid file\"\n                });\n            }\n        }\n    }\n};"]}