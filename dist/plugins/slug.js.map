{"version":3,"sources":["../../src/plugins/slug.js"],"names":[],"mappings":";;;;AAAA,IAAM,OAAO,QAAQ,aAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,OAAR,CAAd;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;;;;;;;AAOA,OAAO,OAAP,GAAiB,UAAC,MAAD,EAAS,OAAT,EAAqB;;AAElC,QAAM,WAAW,QAAQ,QAAzB;AACA,QAAM,cAAc,OAAO,IAAP,CAAY,OAAO,IAAnB,CAApB;AACA,QAAM,YAAY,EAAlB;;AAJkC;AAAA;AAAA;;AAAA;AAMlC,6BAAuB,WAAvB,8HAAoC;AAAA,gBAA3B,UAA2B;;;;;;;;;;;;;;AAahC,gBAAI,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,KACI,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,IAAgC,MAAhC,IAA2C,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,IAAgC,SAAS,MAAT,CAAgB,KAAhB,CAAsB,QAAtB,CAD/E,CAAJ,EACsH;;AAGlH,oBAAM,eAAe,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAA7C;;AAEA,oBAAI,OAAO,IAAP,CAAY,YAAZ,CAAJ,EAA+B;AAC3B,0BAAM,IAAI,KAAJ,WAAkB,YAAlB,sCAAN;AACH;;AAED,uBAAO,GAAP,qBACK,YADL,EACoB;AACZ,0BAAM,MADM;AAEZ,4BAAQ,IAFI;AAGZ,+BAAW,IAHC;AAIZ,0BAAM;AAJM,iBADpB;;AASA,0BAAU,IAAV,CAAe;AACX,0BAAM,UADK;AAEX,0BAAM;AAFK,iBAAf;AAIH;AAEJ;AA5CiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8ClC,WAAO,GAAP,CAAW,MAAX,EAAmB,UAAU,IAAV,EAAgB;;AAE/B,YAAM,WAAW,IAAjB;;AAEA,cAAM,IAAN,CAAW,SAAX,EAAsB,UAAC,QAAD,EAAW,YAAX,EAA4B;;AAE9C,gBAAI,CAAC,SAAS,UAAT,CAAoB,SAAS,IAA7B,CAAL,EAAyC;AACrC,uBAAO,cAAP;AACH;AACD,mBAAO,YAAY,QAAZ,EAAsB,QAAtB,EAAgC,YAAhC,CAAP;AAEH,SAPD,EAOG,UAAC,KAAD,EAAW;AACV,gBAAI,KAAJ,EAAW;AACP,uBAAO,KAAK,KAAL,CAAP;AACH;AACD,mBAAO,MAAP;AACH,SAZD;AAcH,KAlBD;AAmBH,CAjED;;AAmEA,SAAS,WAAT,CAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD;;AAE/C,QAAM,YAAY,KAAK,SAAS,SAAS,IAAlB,CAAL,CAAlB;;AAEA,aAAS,WAAT,CAAqB,OAArB,qBACK,SAAS,IADd,EACqB,SADrB,GAEG,UAAC,KAAD,EAAQ,iBAAR,EAA8B;;AAE7B,YAAI,KAAJ,EAAW;AACP,mBAAO,SAAS,KAAT,CAAP;AACH;;AAED,YAAI,qBAAsB,kBAAkB,GAAlB,CAAsB,QAAtB,MAAoC,SAAS,GAAT,CAAa,QAAb,EAA9D,EAAwF;AACpF,qBAAS,SAAS,IAAlB,IAA0B,YAAY,GAAZ,GAAkB,QAAQ,QAAR,EAA5C;AACA,mBAAO,UAAP;AACH;;AAED,iBAAS,SAAS,IAAlB,IAA0B,SAA1B;AACA,eAAO,UAAP;AACH,KAfD;AAiBH","file":"slug.js","sourcesContent":["const Slug = require(\"speakingurl\");\nconst Async = require(\"async\");\nconst ShortId = require(\"shortid\");\n\n/**\n *\n * @param schema\n * @param options\n */\nmodule.exports = (schema, options) => {\n\n    const mongoose = options.mongoose;\n    const schemaItems = Object.keys(schema.tree);\n    const slugItems = [];\n\n    for (let schemaItem of schemaItems) {\n\n        /**\n         * test_title: String\n         * olamaz, propertylerinde slug: \"slug_key\" olması lazım.\n         *\n         * test_title: {\n         *    type: String,\n         *    slug: \"test_slug\"\n         * }\n         *\n         */\n\n        if (schema.tree[schemaItem].slug\n            && (schema.tree[schemaItem].type == String || (schema.tree[schemaItem].type == mongoose.Schema.Types[\"String\"]))) {\n\n\n            const referenceKey = schema.tree[schemaItem].slug;\n\n            if (schema.tree[referenceKey]) {\n                throw new Error(`Ref: ${referenceKey} in slug is used in another key.`);\n            }\n\n            schema.add({\n                [referenceKey]: {\n                    type: String,\n                    unique: true,\n                    lowercase: true,\n                    trim: true\n                }\n            });\n\n            slugItems.push({\n                main: schemaItem,\n                slug: referenceKey\n            });\n        }\n\n    }\n\n    schema.pre(\"save\", function (next) {\n\n        const instance = this;\n\n        Async.each(slugItems, (slugItem, eachCallback) => {\n\n            if (!instance.isModified(slugItem.main)) {\n                return eachCallback();\n            }\n            return _createSlug(instance, slugItem, eachCallback);\n\n        }, (error) => {\n            if (error) {\n                return next(error);\n            }\n            return next();\n        });\n\n    });\n};\n\nfunction _createSlug(instance, slugItem, callback) {\n\n    const slugValue = Slug(instance[slugItem.main]);\n\n    instance.constructor.findOne({\n        [slugItem.slug]: slugValue\n    }, (error, collapsedInstance) => {\n\n        if (error) {\n            return callback(error);\n        }\n\n        if (collapsedInstance && (collapsedInstance._id.toString() != instance._id.toString())) {\n            instance[slugItem.slug] = slugValue + \"-\" + ShortId.generate();\n            return callback();\n        }\n\n        instance[slugItem.slug] = slugValue;\n        return callback();\n    });\n\n}"]}