{"version":3,"sources":["../../src/plugins/slug.js"],"names":[],"mappings":"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","file":"slug.js","sourcesContent":["const Slug = require(\"speakingurl\");\nconst Async = require(\"async\");\nconst ShortId = require(\"shortid\");\n\n/**\n *\n * @param schema\n * @param options\n */\nmodule.exports = (schema, options) => {\n\n    const mongoose = options.mongoose;\n    const schemaItems = Object.keys(schema.tree);\n    const slugItems = [];\n\n    for (let schemaItem of schemaItems) {\n\n        /**\n         * test_title: String\n         * olamaz, propertylerinde slug: \"slug_key\" olması lazım.\n         *\n         * test_title: {\n         *    type: String,\n         *    slug: \"test_slug\"\n         * }\n         *\n         */\n\n        if (schema.tree[schemaItem].slug\n            && (schema.tree[schemaItem].type == String || (schema.tree[schemaItem].type == mongoose.Schema.Types[\"String\"]))) {\n\n            const referenceKey = schema.tree[schemaItem].slug;\n            if (schema.tree[referenceKey]) {\n                throw new Error(`Ref: ${referenceKey} in slug is used in another key.`);\n            }\n\n            schema.add({\n                [referenceKey]: {\n                    type: String,\n                    unique: true,\n                    lowercase: true,\n                    trim: true\n                }\n            });\n\n            slugItems.push({\n                main: schemaItem,\n                slug: referenceKey\n            });\n        }\n\n    }\n\n    schema.pre(\"save\", function (next) {\n\n        const instance = this;\n\n        Async.each(slugItems, (slugItem, eachCallback) => {\n\n            if (!instance.isModified(slugItem.main)) {\n                return eachCallback();\n            }\n            return _createSlug(instance, slugItem, eachCallback);\n\n        }, (error) => {\n            if (error) {\n                return next(error);\n            }\n            return next();\n        });\n\n    });\n};\n\nfunction _createSlug(instance, slugItem, callback) {\n\n    const slugValue = Slug(instance[slugItem.main]);\n\n    instance.constructor.findOne({\n        [slugItem.slug]: slugValue\n    }, (error, collapsedInstance) => {\n\n        if (error) {\n            return callback(error);\n        }\n\n        if (collapsedInstance && (collapsedInstance._id.toString() != instance._id.toString())) {\n            instance[slugItem.slug] = slugValue + \"-\" + ShortId.generate();\n            return callback();\n        }\n\n        instance[slugItem.slug] = slugValue;\n        return callback();\n    });\n\n}"]}