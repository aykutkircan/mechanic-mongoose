{"version":3,"sources":["../../../src/plugins/uploader/image_uploader.js"],"names":[],"mappings":"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","file":"image_uploader.js","sourcesContent":["/**\n *\n * Updated by uur on 12/01/16.\n */\n\n\"use strict\";\n\nconst Async = require(\"async\");\nconst Sharp = require(\"sharp\");\nconst Tmp = require(\"tmp\");\n\nmodule.exports = (forklift, instance, images, callback) => {\n    \n    Async.each(images, (image, eachCallback) => {\n\n        const localFilePath = instance[image[\"schemaKey\"]][\"path\"];\n        const remoteFolder = `images/${image[\"schemaKey\"]}/${instance._id}-`;\n\n        Async.reduce(image.versions, {}, (uploaded, versionContainer, reduceCallback) => {\n\n            const versionKey = Object.keys(versionContainer)[0];\n            const version = versionContainer[versionKey];\n\n            const sharp = Sharp(localFilePath);\n\n            \n            sharp.resize(version.size[\"width\"], version.size[\"height\"]);\n\n            if (version.size[\"width\"] && version.size[\"width\"] != 0 && version.size[\"height\"] && version.size[\"height\"] != 0) {\n\n                if (!version.resize || version.resize == \"!\") {\n                    sharp.ignoreAspectRatio();\n                }\n                else if (version.resize == \">\") {\n                    sharp.max();\n                    sharp.withoutEnlargement();\n                }\n                else if (version.resize == \"<\") {\n                    sharp.min();\n                }\n                else {\n                    return reduceCallback(new Error(`${version.resize} is not valid for ${versionKey}:${image[\"schemaKey\"]}`))\n                }\n            }\n\n            if (!version.output || version.output == \"jpeg\" || version.output == \"jpg\") {\n\n                sharp.background({r: 255, g: 255, b: 255, a: 1});\n                sharp.flatten();\n                sharp.jpeg();\n\n                if (version.quality) {\n                    sharp.quality(version.quality);\n                }\n            }\n            else if (version.output == \"png\") {\n\n                sharp.png();\n            }\n            else {\n                return reduceCallback(new Error(`${version.output} is not valid for ${versionKey}:${image[\"schemaKey\"]}`))\n            }\n\n            sharp.progressive();\n\n            Tmp.file({postfix: \".\" + version.output}, (error, path) => {\n\n                if (error) {\n                    return reduceCallback(error);\n                }\n\n                sharp.toFile(path, (error) => {\n\n                    if (error) {\n                        return reduceCallback(error);\n                    }\n\n                    forklift.upload(path, remoteFolder + versionKey + \".\" + version.output, {timestamp: true}, (error, url) => {\n\n                        if (error) {\n                            return reduceCallback(error);\n                        }\n\n                        uploaded[versionKey] = url;\n                        return reduceCallback(null, uploaded);\n                    });\n\n                });\n            });\n\n        }, (error, result) => {\n\n            if (error) {\n                return eachCallback(error);\n            }\n\n            instance[image.schemaKey] = result;\n            return eachCallback();\n        });\n\n    }, callback);\n};"]}